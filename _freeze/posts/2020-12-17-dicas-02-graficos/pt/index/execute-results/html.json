{
  "hash": "d6641d97ad115161fcc66cccfb55c7c4",
  "result": {
    "markdown": "---\ndate: \"2020-12-17\"\ndraft: false\nsubtitle: \"No blog da Curso-R, colaborei com três posts que apresentam dicas para fazer tabelas, gráficos e relatórios em R. Neste post, comentamos algumas dicas sobre elaboração de gráficos em relatórios. \"\ntitle: \"Dicas para elaborar gráficos em R\"\ntoc: true\nimage: \"featured-photo.png\"\ncategories:\n  - \"Tips\"\n  - \"ggplot2\"\n  - \"tidyverse\"\n---\n\n\n\n\nNo blog da Curso-R, colaborei com três posts que apresentam dicas para fazer tabelas, gráficos e relatórios em R.\nLeia os posts completos através dos links a seguir:\n\n-   [Dicas para criar **tabelas**](https://blog.curso-r.com/posts/2020-12-03-dicas-relatorios-r4ds1_tabelas/)\n\n-   [Dicas para **gráficos**](https://blog.curso-r.com/posts/2020-17-02-dicas-relatorios-r4ds1_graficos/)\n\n-   [Dicas para **relatórios**](https://blog.curso-r.com/posts/2021-03-15-dicas-relatorios-r4ds1_relatorios/)\n\nOlá!\n\nEste post é uma continuação [do post onde apresentamos os trabalhos premiados no curso R para Ciência de Dados I](https://www.curso-r.com/blog/2020-12-03-dicas-relatorios-r4ds1_tabelas/), e baseado nos feedbacks que enviamos para as pessoas alunas, escrevemos algumas dicas de formatação de tabelas.\nNeste post, apresentaremos algumas dicas para elaborar gráficos com o pacote [`ggplot2`](https://ggplot2.tidyverse.org/)!\nGráficos são representações visuais dos dados.\nSe bem construído, a informação nele é absorvida mais rapidamente.\nAlém disso, funcionam como pausas, deixando a leitura de um relatório menos cansativa.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Ilustração sobre o pacote ggplot2, criada por <a href='https://github.com/allisonhorst/stats-illustrations'>Allison Horst</a>.](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-blanks/ggplot2_blank.png){fig-align='center' width=50%}\n:::\n:::\n\n\n## Dicas para formatar melhor seus gráficos\n\nPrimeiro vamos carregar o pacote [`tidyverse`](https://www.tidyverse.org/):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nO próximo passo é carregar a base que utilizaremos como exemplo: a base de filmes do IMDB.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb <-\n  read_delim(\n    \"https://raw.githubusercontent.com/curso-r/202010-r4ds-1/master/dados/imdb2.csv\",\n    \";\",\n    escape_double = FALSE,\n    trim_ws = TRUE\n  ) \n```\n:::\n\n\n## Exemplo: Diretores de sucesso!\n\n### Preparar a base de dados\n\nNeste exemplo, vamos criar um gráfico que apresente o lucro médio dos filmes segundo o diretor, para identificar pessoas diretoras de sucesso!\nPrimeiro precisaremos obter as informações necessárias para criar o gráfico.\n\nA base imdb apresenta 3713 linhas, sendo que cada linha possui informação de um filme.\nDentre as variáveis presentes na base são o orçamento e a receita dos filmes.\nCom essas variáveis, é possível calcular o lucro de cada filme.\nPorém, antes vamos remover os filmes das quais não temos as informações de orçamento e/ou receita (ou seja, `NA`).\nExistem diversas formas de remover os valores faltantes - `NA` - de uma base, então utilizaremos a função [`drop_na()`](https://tidyr.tidyverse.org/reference/drop_na.html), do pacote tidyr, indicando como argumento as colunas em que desejamos remover os `NA`.\nDepois, utilizando a função `mutate()`, criaremos uma nova coluna que apresenta o valor do lucro de cada filme:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_lucro <- imdb %>%\n  drop_na(orcamento, receita) %>%\n  mutate(lucro = receita - orcamento)\n```\n:::\n\n\nPara obter a média do lucro por diretor, podemos utilizar as funções `group_by()` para agrupar por diretor, e `summarise()` para fazer as sumarizações necessárias: neste caso calcularemos a média (com a função `mean()`), e também o número de filmes por diretor (com a função `n()` - que conta o número de linhas, sendo que cada linha representa um filme).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_lucro_diretores <- imdb_lucro %>%\n  group_by(diretor) %>%\n  summarise(media_lucro = mean(lucro),\n            numero_filmes = n())\n\n\nhead(imdb_lucro_diretores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  diretor         media_lucro numero_filmes\n  <chr>                 <dbl>         <int>\n1 Aaron Schneider     1676553             1\n2 Aaron Seltzer      28546578             1\n3 Abel Ferrara      -11272676             1\n4 Adam Carolla       -1394057             1\n5 Adam Goldberg      -1647420             1\n6 Adam Marcus        13435068             1\n```\n:::\n:::\n\n\nPorém não podemos apresentar todas as 1419 pessoas diretoras no mesmo gráfico, pois não seria legível!\nPrecisamos definir alguns critérios para selecionar as pessoas diretoras que aparecerão no gráfico.\n\nO primeiro critério escolhido é ter dirigido mais que um filme!\nCom a função `filter(condicao)`, esse critério é possível de ser satisfeito.\nDepois, ordenaremos a base de forma decrescente segundo o lucro médio, assim teremos nas primeiras linhas as pessoas diretoras com os maiores lucros médios.\nIsso é possível de ser feito com as funções `arrange(desc(variavel))`.\nCom a função `slice()`, podemos 'cortar' a base: utilizando como argumento `1:10`, estamos solicitando apenas as linhas 1 até 10.\n\nNeste caso, o resultado destes critérios será uma base com as 10 pessoas diretoras com maior lucro médio e que tenham dirigido mais de um filme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_top_diretores <- imdb_lucro_diretores %>% \n  filter(numero_filmes > 1) %>% \n  arrange(desc(media_lucro)) %>% \n  slice(1:10)\n\nimdb_top_diretores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   diretor          media_lucro numero_filmes\n   <chr>                  <dbl>         <int>\n 1 George Lucas      277328296              5\n 2 Colin Trevorrow   252717532.             2\n 3 Pierre Coffin     237275640              2\n 4 Joss Whedon       199202360.             3\n 5 James Cameron     194620985              6\n 6 Roger Allers      188543668.             2\n 7 Pete Docter       158113780.             3\n 8 Francis Lawrence  151100394.             5\n 9 Peter Jackson     132967515              5\n10 Andrew Adamson    130611730              4\n```\n:::\n:::\n\n\n### Criar o gráfico\n\nAgora podemos começar a criar o gráfico (e apresentar algumas dicas!).\n\nO código abaixo apresenta um gráfico de barras (`geom_col()`) simples, criado com o pacote `ggplot2`, e vamos melhorá-lo por etapas!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_top_diretores %>% \n  ggplot() + \n  geom_col(aes(x = diretor, y = media_lucro))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nA primeira dica é: quando os nomes no eixo x estiverem se sobrepondo (no caso deste gráfico, o nome dos diretores), podemos inverter os eixos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_top_diretores %>% \n  ggplot() + \n  geom_col(aes(y = diretor, x = media_lucro))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nAgora está muito mais fácil de ler os nomes dos diretores!\n\nQuando trabalhamos com variáveis que representam dinheiro (como no caso da variável lucro), podemos formatar os valores para que fiquem formatados como dinheiro, utilizando a função `scales::dollar()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_top_diretores %>% \n  ggplot() + \n  geom_col(aes(y = diretor, x = media_lucro)) +\n  scale_x_continuous(labels = scales::dollar)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAgora que os eixos estão bem formatados, podemos formatar a legenda para ficar claro o que cada eixo significa!\nA função `labs()` permite escrever o que desejamos que apareça como legenda em cada elemento (por exemplo: `labs(x = \"Legenda do eixo X\", y = \"Legenda do eixo Y\")` .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_top_diretores %>% \n  ggplot() + \n  geom_col(aes(y = diretor, x = media_lucro)) +\n  scale_x_continuous(labels = scales::dollar) +\n  labs(x = \"Pessoas diretoras\", y = \"Lucro médio\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nÉ interessante também ordenar as barras do gráfico de barras, pois facilita a comparação das categorias (neste caso, as pessoas diretoras).\n\nPara isso, podemos tratar a variável diretor como um fator (`factor`) [^1], e ordenar os níveis (`levels`) de diretores segundo a variável `media_lucro`. A função `fct_reorder()` do pacote [`forcats`](https://forcats.tidyverse.org/) pode ser utilizada para isso, pois ela ordena os níveis de um fator utilizando a ordem de outra variável.\n\n[^1]: Falamos um pouco sobre fatores no [post anterior](https://www.curso-r.com/blog/2020-12-03-dicas-relatorios-r4ds1_tabelas/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_top_diretores %>%\n  mutate(diretor = forcats::fct_reorder(diretor, media_lucro)) %>%\n  ggplot() +\n  geom_col(aes(y = diretor, x = media_lucro)) +\n  scale_x_continuous(labels = scales::dollar) +\n  labs(x = \"Pessoas diretoras\", y = \"Lucro médio\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nPor último (mas também importante) é uma dica estética, porém tem o poder de deixar o gráfico muito mais atrativo!\nExistem várias funções no pacote `ggplot2` com temas para os gráficos, e elas usam o prefixo `theme_` (por exemplo, `theme_light()`).\nAlém disso, existem pacotes que oferecem mais temas, como o [ggthemr](https://github.com/Mikata-Project/ggthemr) e o [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/)!\n\nO exemplo abaixo utiliza o tema `theme_light()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_top_diretores %>%\n  mutate(diretor = forcats::fct_reorder(diretor, media_lucro)) %>%\n  ggplot() +\n  geom_col(aes(y = diretor, x = media_lucro)) +\n  scale_x_continuous(labels = scales::dollar) +\n  labs(x = \"Pessoas diretoras\", y = \"Lucro médio\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nO exemplo abaixo utiliza o tema `flat` do pacote [ggthemr](https://github.com/Mikata-Project/ggthemr):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_top_diretores %>%\n  mutate(diretor = forcats::fct_reorder(diretor, media_lucro)) %>%\n  ggplot() +\n  geom_col(aes(y = diretor, x = media_lucro)) +\n  scale_x_continuous(labels = scales::dollar) +\n  labs(x = \"Pessoas diretoras\", y = \"Lucro médio\") +\n  ggthemr::ggthemr(\"flat\")$theme\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://i.ibb.co/GQ2Ztmw/unnamed-chunk-12-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Conclusões\n\nDepois dessas dicas, o resultado é um gráfico mais atraente e informativo do que a versão básica que fizemos com o `ggplot2` no começo do post!\n\nExistem infinitas possibilidades para criar visualizações de dados com R.\nNeste post apresentamos algumas dicas simples para formatar melhor nossos gráficos, e no próximo post apresentaremos mais algumas dicas sobre relatórios com o pacote `R Markdown`.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://media.giphy.com/media/LmNwrBhejkK9EFP504/giphy.gif){fig-align='center' width=50%}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}