{
  "hash": "7f4c6bfa2c9ead1810077800250ec45d",
  "result": {
    "markdown": "---\ntitle: \"Introducción a GitHub Actions para usuarias de R\"\nsubtitle: \"Serie GitHub Actions - 1 - En esta publicación, presentaré brevemente GitHub Actions y le mostraré cómo puede comenzar a usar GitHub Actions con R.\"\nauthor: \"Beatriz Milz\"\ndate: \"2022-06-30\"\ncategories: [\"Git\", \"GitHub\", \"GitHub Actions\", \"Automations\"]\nimage: \"featured.png\"\ntoc: true\ndraft: false\n---\n\n<a href=\"../en/index.qmd\"> <button type=\"button\" class=\"btn btn-primary\">English</button></a>\n<a href=\"../es/index.qmd\"> <button type=\"button\" class=\"btn btn-primary\">Español</button></a>\n<a href=\"../pt/index.qmd\"> <button type=\"button\" class=\"btn btn-primary\">Português</button></a>\n\n\n::: callout-note\n## ¡Bienvenides!\n\nEsta publicación fue escrita originalmente en inglés y fue traducida con la ayuda del traductor de Google y revisada por mí.\nMis habilidades en Español son intermedias, así que si encuentras algún error de ortografía, ¡avísame!\nBuena lectura :)\n:::\n\n¡Oye!\nEste es el primer post de la serie \"GitHub Actions\".\nEsta serie de post es un material complementario para mi charla relámpago en la [Conferencia RStudio - rstudio::conf 2022](https://www.rstudio.com/conference/).\n\n[![](images/talk.png){fig-align=\"center\" width=\"70%\"}](https://rstudioconf2022.sched.com/event/11ia9?iframe=no)\n\nEn esta publicación, **presentaré brevemente GitHub Actions y le mostraré cómo puede comenzar a usar GitHub Actions con R**.\n\n## ¿Qué es GitHub Actions?\n\n[GitHub Actions](https://github.com/features/actions) es una herramienta de [GitHub](https://github.com/) que nos permite automatizar tareas con código.\nPor ejemplo, podemos especificar una serie de comandos para que se ejecuten cuando se active.\n\nPodemos hacer muchas automatizaciones diferentes con GitHub Actions, como:\n\n-   Descargar y guardar un archivo todos los días (como `.csv`/ `.xlsx`/ `.json`...);\n\n-   Ejecutar un script en R y guardar los resultados en una base de datos o una hoja de cálculo de Google, por ejemplo;\n\n-   Ejecución de rutinas de web scraping;\n\n-   Actualizar documentos RMarkdown o Quarto;\n\n-   ¡Etcétera!\n    🚀\n\n## ¿Cómo utilizar GHA en un paquete en R?\n\nGitHub Actions se utiliza ampliamente en el desarrollo de paquetes para CI/CD.\nPor ejemplo, las personas que desarrollan paquetes usan GitHub Actions para probar su código, ejecutar rutinas de chequeo, actualizar la documentación y el sitio web del paquete, y más.\n\n::: callout-tip\n## ¿Qué es CI/CD en el contexto de paquetes en R?\n\nLa integración continua (CI) es una práctica de desarrollo que requiere que las personas que desarrollan el paquete integren regularmente el código en el repositorio, después de lo cual se realizan chequeos y pruebas automatizadas para verificar la integridad del nuevo código.\n\nLa entrega continua (CD) es una metodología de desarrollo de software en la que los cambios de código se verifican, prueban y lanzan automáticamente a producción.\n**Esto permite que se lancen con frecuencia nuevas versiones de los paquetes.**\n:::\n\nEl paquete [usethis](https://usethis.r-lib.org/reference/github_actions.html) nos ayuda a configurar GitHub Actions en paquetes R.\nEs fundamental saber que, por defecto, las Actions creadas usando usethis provienen del repositorio [r-lib/actions](https://github.com/r-lib/actions/tree/v2-branch/examples#readme).\n¡Guarde este enlace; el contenido es muy relevante!\n\n::: callout-note\n## 🏆\n\nMe gustaría agradecer todo el trabajo realizado por quienes contribuyen al [repositorio r-lib/actions](https://github.com/r-lib/actions/graphs/contributors).\n🏆 Para mí, este repositorio fue la fuente de contenido y código más importante sobre GitHub Actions en R.\n\n[![](images/actions-repo.png){fig-align=\"center\" width=\"100%\"}](https://github.com/r-lib/actions/blob/v2-branch/examples/README.md)\n:::\n\nAquí hay algunos ejemplos de cómo configurar GH Actions en paquetes:\n\n-   Para realizar chequeos (como `devtools::check()`) en un paquete siempre que haya un cambio de código, utilice:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_github_action(\"check-release\")\n```\n:::\n\n\nEsto es útil porque cada vez que ocurre un error en el cheque, recibimos un correo electrónico de GitHub ⚠️.\nDe esa manera, sabemos que algo está malo en el código y podemos solucionarlo lo antes posible.\n\nPara actualizar el sitio web del paquete (como `pkgdown::build_site()`) cada vez que haya un cambio en el código, utilice:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_github_action(\"pkgdown\")\n```\n:::\n\n\nEsto permite que el sitio web y la documentación del paquete estén siempre actualizados.\n📌\n\n## ¿Cómo utilizar GHA en un script en R?\n\nYa sabemos que podemos hacer automatizaciones realmente geniales en paquetes en R utilizando GitHub Actions.\nPero la mayoría de las personas que programan en R que conozco utilizan scripts R y archivos RMarkdown en el día a día.\nNo encontré ejemplos del uso de GHA con scripts simples (sin la estructura del paquete) en el repositorio [r-lib/actions](https://github.com/r-lib/actions/blob/v2-branch/examples/README.md).\nEntonces, para eso, ¡necesitamos saber cómo funciona GHA!\n\nLa [documentación de GitHub sobre flujos de trabajo](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions) es una fuente excelente para obtener más información sobre este tema.\n\nEn primer lugar, la automatización realizada con GHA se llama **Workflow** (o flujo de trabajo).\nEl flujo de trabajo tiene dos partes principales: **Events** (Eventos) y **Jobs** (Trabajos).\n\n-   **Events/Eventos** describen lo que puede iniciar un flujo de trabajo.\n    Por ejemplo, un evento podría ser \"comenzar este flujo de trabajo todos los días a las 9 am\" o \"cada vez que alguien hace un push al repositorio\" (en otras palabras, cuando hay un cambio en el código).\n\n-   **Jobs/Trabajos** describe lo que se supone que debe hacer la computadora.\n    ¡Imagínese que comienza sin ningún software instalado!\n    Por lo tanto, debemos decir qué sistema operativo (SO) queremos que ejecute nuestro código (por ejemplo, Ubuntu/Windows/Mac OS).\n    Además, necesitamos instalar R y cualquier paquete necesario para ejecutar nuestro código.\n    Después de eso, podemos agregar el script que queremos ejecutar en R y guardar los resultados generados.\n\n## Ejemplo\n\nEste es un ejemplo de un archivo de workflow/flujo de trabajo simple.\nEl flujo de trabajo comienza cuando presiona un botón en GitHub (el evento).\nEntonces, instala R e imprime el mensaje \"Hello R World!\" en la consola (el trabajo).\n\n``` yml\n# Evento/Event - ¿Qué inicia el flujo de trabajo/workflow?\non:\n  workflow_dispatch:\n\n# Nombre del workflow\nname: hello-r-world\n\n# Jobs/Trabajos - ¿Qué debe hacer la computadora?\njobs:\n  write-message:\n    # Usar Ubuntu   \n    runs-on: ubuntu-latest \n    steps:\n       # Instalar R\n      - uses: r-lib/actions/setup-r@v3    \n      - name: print-message   \n        # Código para ejecutar el script R\n        run: Rscript -e 'print(\"Hello R World!\")' \n```\n\n## ¡Nos vemos en el siguiente post!\n\nEsa es la idea general de GitHub Actions.\nEn la próxima publicación, escribiré cómo puede crear un GHA que ejecute un script R y guarde el resultado en el repositorio de GitHub.\n¡Nos vemos pronto!\n\n## Agradecimientos\n\n[Daniel Falbel](https://github.com/dfalbel), [Athos Damiani](https://github.com/Athospd), y [Julio Trecenti](https://github.com/jtrecenti): las personas que me presentaron GitHub Actions, respondieron preguntas y enviaron muchos enlaces increíbles.\n¡Gracias!\n\nPersonas que contribuyen al [repositorio r-lib/actions](https://github.com/r-lib/actions/graphs/contributors): 🏆 Para mí, este repositorio fue la fuente de contenido más importante en GitHub Actions para R.\n\n[Julio Trecenti](https://github.com/jtrecenti): gracias por revisar la versión en Inglés del post!\n\n## Referencias\n\n-   [GitHub Actions](https://github.com/features/actions)\n\n-   [Paquete usethis](https://usethis.r-lib.org/reference/github_actions.html)\n\n-   [Repositorio r-lib/actions](https://github.com/r-lib/actions/tree/v2-branch/examples#readme)\n\n-   [Documentación de GitHub sobre flujos de trabajo](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions)\n\n\n## Comparte y apoya!\n\nSi te gusta este tipo de contenido, considera apoyarme en [GitHub Sponsors](https://github.com/sponsors/beatrizmilz/), o compártelo en Twitter:\n):\n\n<center>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I wrote a new blog post about &quot;Introduction to GitHub Actions to R users&quot;!<a href=\"https://t.co/lCBH4vIGa2\">https://t.co/lCBH4vIGa2</a><br><br>This post is complementary material for my lightning talk at the <a href=\"https://twitter.com/rstudio?ref_src=twsrc%5Etfw\">@rstudio</a> conference!<br><br>Feedback is always welcome :)<a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> <a href=\"https://twitter.com/hashtag/github?src=hash&amp;ref_src=twsrc%5Etfw\">#github</a> <a href=\"https://twitter.com/hashtag/githubactions?src=hash&amp;ref_src=twsrc%5Etfw\">#githubactions</a> <a href=\"https://twitter.com/hashtag/rstudioconf?src=hash&amp;ref_src=twsrc%5Etfw\">#rstudioconf</a> <a href=\"https://twitter.com/hashtag/rstudioconf2022?src=hash&amp;ref_src=twsrc%5Etfw\">#rstudioconf2022</a></p>&mdash; Beatriz Milz (@BeaMilz) <a href=\"https://twitter.com/BeaMilz/status/1542526491807797248?ref_src=twsrc%5Etfw\">June 30, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</center>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}