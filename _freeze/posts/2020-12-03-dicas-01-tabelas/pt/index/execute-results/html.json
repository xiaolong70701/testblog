{
  "hash": "61120267e26cf812d15d4924a8ed721c",
  "result": {
    "markdown": "---\ndate: \"2020-12-03\"\ndraft: false\nsubtitle: \"No blog da Curso-R, colaborei com três posts que apresentam dicas para fazer tabelas, gráficos e relatórios em R.  Neste post, comentamos algumas dicas sobre elaboração de tabelas em relatórios.\"\ntitle: \"Dicas para elaborar tabelas em R\"\nimage: \"featured-photo.gif\"\ntoc: true\ncategories: \n  - \"Tips\"\n  - \"Tables\"\n---\n\n\n\n\nNo blog da Curso-R, colaborei com três posts que apresentam dicas para fazer tabelas, gráficos e relatórios em R.\nLeia os posts completos através dos links a seguir:\n\n-   [Dicas para criar **tabelas**](https://blog.curso-r.com/posts/2020-12-03-dicas-relatorios-r4ds1_tabelas/)\n\n-   [Dicas para **gráficos**](https://blog.curso-r.com/posts/2020-17-02-dicas-relatorios-r4ds1_graficos/)\n\n-   [Dicas para **relatórios**](https://blog.curso-r.com/posts/2021-03-15-dicas-relatorios-r4ds1_relatorios/)\n\n## 5 Dicas para formatar melhor suas tabelas\n\nAgora seguimos para as dicas!\n\nPrimeiro vamos carregar o pacote `tidyverse`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nO próximo passo é carregar a base que utilizaremos como exemplo: a base de filmes do IMDB.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb <-\n  read_delim(\n    \"https://raw.githubusercontent.com/curso-r/202010-r4ds-1/master/dados/imdb2.csv\",\n    \";\",\n    escape_double = FALSE,\n    trim_ws = TRUE\n  )\n```\n:::\n\n\n### Exemplo 1: Ordenar, formatar dinheiro e nomear as colunas\n\nNo exemplo a seguir, primeiramente vamos selecionar as variáveis que representam o nome e o orçamento dos filmes (com a função `select()`).\nÉ interessante ordenar a tabela segundo alguma variável, para facilitar a leitura.\nNo exemplo a seguir, vamos ordenar pelo orçamento de forma decrescente utilizando a função `arrange(desc(variavel))`.\n\nVamos selecionar apenas as primeiras linhas da base, para facilitar a apresentação neste post (utilizando a função `head()`), e salvar em um objeto chamado `filmes_orcamento` (que usaremos nos códigos a seguir).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilmes_orcamento <- imdb %>%\n  select(titulo, orcamento) %>%\n  arrange(desc(orcamento)) %>% \n  head()\n\nfilmes_orcamento\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  titulo                                    orcamento\n  <chr>                                         <dbl>\n1 Pirates of the Caribbean: At World's End  300000000\n2 John Carter                               263700000\n3 Tangled                                   260000000\n4 Spider-Man 3                              258000000\n5 The Dark Knight Rises                     250000000\n6 Avengers: Age of Ultron                   250000000\n```\n:::\n:::\n\n\nPara variáveis que representam dinheiro, é possível usar a função `scales::dollar()` para que os valores fiquem formatados como dinheiro (e fiquem mais legíveis!).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilmes_orcamento %>% \n  mutate(orcamento = scales::dollar(orcamento)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  titulo                                    orcamento   \n  <chr>                                     <chr>       \n1 Pirates of the Caribbean: At World's End  $300,000,000\n2 John Carter                               $263,700,000\n3 Tangled                                   $260,000,000\n4 Spider-Man 3                              $258,000,000\n5 The Dark Knight Rises                     $250,000,000\n6 Avengers: Age of Ultron                   $250,000,000\n```\n:::\n:::\n\n\nA tabela anteiror foi apresentada igual a um código que aparece como retorno no console do R, e isso não fica legal em um relatório.\nExistem diversas formas de apresentar tabelas, mas neste exemplo utilizaremos a função `knitr::kable()` [^1].\nAlém disso, é comum que o nome das variáveis estejam escritas com letras minúsculas, sem acentuação, etc (por exemplo: `orcamento`).\nPara que a tabela fique melhor formatada, podemos renomear o nome das colunas usando o argumento `col.names` da função `knitr::kable()`, informando um vetor com os novos nomes para as colunas da tabela.\n\n[^1]: Outros pacotes que permitem criar tabelas são: [DT](https://rstudio.github.io/DT/), [reactable](https://glin.github.io/reactable/index.html), [flextable](https://davidgohel.github.io/flextable/articles/overview.html) e [kableExtra](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html).\n    [Essa página](https://rfortherestofus.com/2019/11/how-to-make-beautiful-tables-in-r/) também apresenta materiais muito ricos sobre elaboração de tabelas!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb %>%\n  select(titulo, orcamento) %>%\n  arrange(desc(orcamento)) %>% \n  mutate(orcamento = scales::dollar(orcamento)) %>%\n  head() %>%\n  knitr::kable(col.names = c(\"Título do filme\", \"Orçamento\"))\n```\n\n::: {.cell-output-display}\n|Título do filme                           |Orçamento    |\n|:-----------------------------------------|:------------|\n|Pirates of the Caribbean: At World's End  |$300,000,000 |\n|John Carter                               |$263,700,000 |\n|Tangled                                   |$260,000,000 |\n|Spider-Man 3                              |$258,000,000 |\n|The Dark Knight Rises                     |$250,000,000 |\n|Avengers: Age of Ultron                   |$250,000,000 |\n:::\n:::\n\n\nA tabela ficou mais fácil de ser lida.\nO que achou do resultado?\n\n### Exemplo 2: Arredondar valores e ordenar categorias\n\nNo exemplo a seguir, vamos calcular a nota média dos filmes na base do IMDB para cada classificação etária.\nFazemos isso utilizando as funções `group_by()` e `summarise()`.\n\nSalvaremos o resultado em um objeto chamado `nota_classificacao` (que usaremos nos códigos a seguir).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnota_classificacao <- imdb %>%\n  group_by(classificacao) %>%\n  summarise(nota_media_imdb = mean(nota_imdb, na.rm = TRUE)) \n\nnota_classificacao\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  classificacao       nota_media_imdb\n  <chr>                         <dbl>\n1 A partir de 13 anos            61.8\n2 A partir de 18 anos            64.6\n3 Livre                          62.6\n4 Outros                         66.3\n```\n:::\n:::\n\n\nO primeiro ponto interessante para arrumar são os valores da variável `nota_media_imdb`, arredondando os valores para que não apareça as casas decimais.\nPara melhorar a apresentação, podemos usar a função `round()` (utilizada para arredondar números) junto com a função `mutate()` (que altera ou cria novas variáveis).\nCom o argumento `digits` da função `round()`, é possível definir quantas casas decimais você quer que o número tenha.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnota_classificacao %>%\n  mutate(nota_media_imdb = round(nota_media_imdb, digits = 0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  classificacao       nota_media_imdb\n  <chr>                         <dbl>\n1 A partir de 13 anos              62\n2 A partir de 18 anos              65\n3 Livre                            63\n4 Outros                           66\n```\n:::\n:::\n\n\nNa base que estamos usando de exemplo, a variável `classificacao` é uma variável categórica do tipo `chr` (character), ou seja, um texto.\nPor padrão, a ordem utilizada é a alfabética (repare no resultado anterior, primeiro aparecem as classificações que começam com A, depois com L e por último a que começa com O).\n\nPara ordenar essa variável, precisamos transformar ela em um fator.\nPortanto, usaremos o pacote `forcats`, que faz parte do `tidyverse` e possui funções para trabalhar com fatores [^2].\n\n[^2]: Caso queira saber mais sobre fatores e o pacote `forcats`, recomendo consutar [este material da Curso-R](https://www.curso-r.com/material/forcats/).\n\nUsando a função `mutate()` com `fct_relevel()` (do pacote `forcats`), podemos alterar a ordem dos níveis desta variável, passando como argumento:\n\n-   a variável que queremos transformar em fator e alterar os seus níveis (os `levels`),\n\n-   um vetor com os níveis (`levels`), na ordem que desejamos.\n\nPosteriormente podemos ordenar a variável utilizando a função `arrange()`, e teremos como resultado a tabela ordenada de uma forma que faz mais sentido:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnota_classificacao %>%\n  mutate(nota_media_imdb = round(nota_media_imdb, digits = 0)) %>%\n  mutate(classificacao = forcats::fct_relevel(\n    classificacao,\n    c(\"Livre\",\n      \"A partir de 13 anos\",\n      \"A partir de 18 anos\",\n      \"Outros\")\n  )) %>%\n  arrange(classificacao) %>%\n  knitr::kable(col.names = c(\"Classificação etária\",\n                             \"Nota média no IMDB\"))\n```\n\n::: {.cell-output-display}\n|Classificação etária | Nota média no IMDB|\n|:--------------------|------------------:|\n|Livre                |                 63|\n|A partir de 13 anos  |                 62|\n|A partir de 18 anos  |                 65|\n|Outros               |                 66|\n:::\n:::\n\n\n## Conclusão\n\nNeste post conhecemos os trabalhos premiados no curso de [R para Ciência de dados I](https://www.curso-r.com/cursos/r4ds-1/) oferecido em outubro/2020, assim como algumas dicas que surgiram a partir do feedback dos trabalhos.\n\nNos próximos posts apresentaremos mais algumas dicas sobre gráficos com o pacote `ggplot2` e relatórios com o pacote `R Markdown`.\n\nE caso você tenha interesse em saber mais sobre os cursos, a [página de cursos](https://www.curso-r.com/cursos/) foi atualizada, e as incrições para os cursos de 2021 já estão abertas!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}