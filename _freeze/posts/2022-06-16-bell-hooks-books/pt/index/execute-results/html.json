{
  "hash": "cf4547790b9bd9ea26ef0d8b9d9377fc",
  "result": {
    "markdown": "---\ntitle: \"Bell hooks books\"\nsubtitle: \"using the google books api\"\nauthor: \"Beatriz Milz\"\ndate: \"2022-06-12\"\ncategories: [\"API\"]\n# image: \"img/search.png\"\ntoc: true\ndraft: true\n---\n\n<a href=\"../pt/index.qmd\"> <button type=\"button\" class=\"btn btn-primary\">Português</button></a>\n\n::: {.cell}\n\n```{.r .cell-code}\nget_author_books <- function(author, start){\n  \n  author_clean <- author |>\n    stringr::str_to_lower() |>\n    stringr::str_replace_all(\" \", \"+\")\n  \n  url <- glue::glue(\"https://www.googleapis.com/books/v1/volumes?q=+inauthor:{author_clean}&startIndex={start}&maxResults=40\")\n  \n  content_list <- url |> \n    httr::GET() |> \n    httr::content()\n  \n  \n  if(length(content_list$items) != 0){\n     df_books <- content_list$items |>\n    purrr::map(unlist, recursive = TRUE) |>\n    purrr::map_dfr(tibble::enframe, .id = \"id_ordem\") |>\n    dplyr::distinct(id_ordem, name, .keep_all = TRUE) |> \n    tidyr::pivot_wider() |>\n    janitor::clean_names()\n  \n  df_books\n  }\n}\n\nstarting_n <- seq(1 , to = 400, by = 40)\n\nall_books <- purrr::map_dfr(starting_n,\n                            ~ get_author_books(author = \"Bell Hooks\", start = .x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_books_bh <- all_books |> \n  dplyr::mutate(authors_lower_case = stringr::str_to_lower(volume_info_authors),\n                  authors_lower_case = stringr::str_remove_all(authors_lower_case, \"\\\\.\")) |> \n  dplyr::filter(authors_lower_case %in% c(\"bell hooks\", \"gloria jean watkins\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_books_bh |> \n  dplyr::count(volume_info_language, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n  volume_info_language     n\n  <chr>                <int>\n1 en                      65\n2 es                       6\n3 pt-BR                    6\n4 de                       5\n5 fr                       3\n6 it                       2\n7 eu                       1\n8 sl                       1\n9 sv                       1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbh_english <- results_books_bh |> \n  dplyr::filter(volume_info_language == \"en\") |> \n  dplyr::transmute(\n    book_title = volume_info_title,\n    book_subtitle = volume_info_subtitle,\n    publisher = volume_info_publisher,\n    published_date = volume_info_published_date,\n    description = volume_info_description,\n    image = volume_info_image_links_thumbnail,\n    link = self_link\n  ) |> \n  dplyr::mutate(published_year = stringr::str_extract(published_date, \"^.{4}\")) |> \n  dplyr::distinct() |> \n  dplyr::arrange(book_title) |> \n  dplyr::distinct(book_title, .keep_all = TRUE) |> \n  # removing duplicates\n  dplyr::filter(!book_title %in% c(\"Feminism Is for Everybody - 2015 Edition\", \n                                   \"FEMINIST THEORY - NEW EDITION\",\n                                   \"Happy to Be Nappy (Board Book) Happy to Be Nappy\",\n                                   \"Reel to Real: sider om hver film\")) |> \n  dplyr::filter(!(book_title == \"Teaching To Transgress\" & is.na(book_subtitle)))\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}