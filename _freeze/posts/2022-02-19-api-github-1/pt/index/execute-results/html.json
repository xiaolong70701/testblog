{
  "hash": "080ae1382cf8f2216313c13eca4cb4a6",
  "result": {
    "markdown": "---\nsubtitle: \"Segundo post sobre acesso à APIs.\"\ndraft: FALSE\nauthor: \"Beatriz Milz\"\ncategories: [\"API\", \"purrr\", \"httr\", \"Web Scraping\", \"Git\", \"GitHub\"]\ntitle: \"Acessando APIs com R: GitHub - Parte 1\"\ndate: \"2022-02-19\"\nimage: \"octocat-featured.png\"\ntoc: true\n---\n\n\n\n\n::: callout-tip\nEsse post foi origalmente publicado no [blog da Curso-R](https://blog.curso-r.com/posts/2022-02-19-api-github-1/).\n:::\n\n## Introdução\n\nEsse post faz parte de uma série sobre acesso à APIs com R!\nO primeiro post foi uma [introdução sobre como acessar APIs com R](https://blog.curso-r.com/posts/2021-11-29-api-pokemon/).\n\nNeste post mostraremos um exemplo usando a **API do GitHub**.\n\nO GitHub é uma plataforma onde conseguimos hospedar repositórios (pastas com nossos códigos e arquivos) com controle de versão usando o Git, e podemos fazer **muitas** coisas utilizando a sua API.\nE como dissemos no [post anterior](https://blog.curso-r.com/posts/2021-11-29-api-pokemon/): \"o primeiro passo para acessar qualquer API é procurar uma documentação\".\nA boa notícia é que a [documentação da API do GitHub](https://docs.github.com/pt/rest) está disponível em Português e é bem detalhada!\n\nExistem muitas ações possíveis utilizando essa API.\nO que escolhemos para esse exemplo é buscar os repositórios que pertencem à uma organização.\n\nSegundo a documentação, para consultar os repositórios que pertencem à organização **octokit**, podemos utilizar a seguinte busca:\n\n    GET /orgs/octokit/repos\n\nO equivalente a isso usando o pacote `httr` é:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-1_5570c346fc65034c7ae81ca5bf771fc6'}\n\n```{.r .cell-code}\n# url_base - nunca muda na mesma API\nurl_base <- \"https://api.github.com\"      \n\n# endpoint - é o que muda o resultado\nendpoint <- \"/orgs/octokit/repos\"                 \n\n# precisamos colar os textos para criar o link\nu_github <- paste0(url_base, endpoint) \n\n# ver como o texto ficou colado\n# u_github \n# > \"https://api.github.com/orgs/octokit/repos\"\n\n# fazer a requisição do tipo GET\nr_github <- httr::GET(u_github) \n\nr_github\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResponse [https://api.github.com/orgs/octokit/repos]\n  Date: 2022-06-11 22:22\n  Status: 200\n  Content-Type: application/json; charset=utf-8\n  Size: 182 kB\n[\n  {\n    \"id\": 417862,\n    \"node_id\": \"MDEwOlJlcG9zaXRvcnk0MTc4NjI=\",\n    \"name\": \"octokit.rb\",\n    \"full_name\": \"octokit/octokit.rb\",\n    \"private\": false,\n    \"owner\": {\n      \"login\": \"octokit\",\n      \"id\": 3430433,\n...\n```\n:::\n:::\n\n\nPodemos acessar o resultado usando a função `httr::content()`, porém não vamos colocar o resultado no post pois ficaria muito longo.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-2_71568c4f15217f1f658b978faeb395fb'}\n\n```{.r .cell-code}\n# httr::content(r_github)\n```\n:::\n\n\n## O que é o pacote `gh`?\n\nO pacote [gh](https://gh.r-lib.org/) permite acessar a API do GitHub.\nA lógica mostrada anteriormente se aplica para esse pacote também: precisaremos consultar a documentação para verificar como fazer alguma tarefa com a API.\n\n## Primeiro exemplo com o pacote `gh`\n\nNeste exemplo, vamos buscar as informações sobre os repositórios que são organização Curso-R no GitHub, gerar um dataframe, e ao final fazer uma visualização simples.\n\n### Informações gerais da organização Curso-R\n\nPodemos buscar informações sobre a organização da Curso-R no GitHub:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-3_aa9eb46dc0fa83b0fadd3134ba4e8131'}\n\n```{.r .cell-code}\ngh_curso_r <- gh::gh(\"GET /orgs/{org}\",\n                     org = \"curso-r\")\n```\n:::\n\n\nA sintaxe do pacote `gh` é similar ao [`glue`](https://github.com/tidyverse/glue).\nQuando queremos buscar uma informação que está em uma variável (no caso \"curso-r\"), colocamos os `{variavel}` no primeiro argumento e escrevemos `variavel=` nos argumentos seguintes.\n\nComo vimos, o resultado é uma lista.\nPara consultar o número de repositórios públicos, podemos usar o `$` para acessar essa informação dentro da lista:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-4_4bc7b3f0bbd76f50ee3a900b30924b4f'}\n\n```{.r .cell-code}\ngh_curso_r$public_repos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 313\n```\n:::\n:::\n\n\nOlha só, a Curso-R tem atualmente 313 repositórios públicos no GitHub!\nTemos muitos repositórios pois criamos um diferente para cada curso, para que quem faz aula com a gente tenha sempre um lugar para olhar todos os materiais, de forma organizada e independente.\n\n### Acessando informações de repositórios\n\nPodemos buscar informações sobre os repositórios que pertencem à organização Curso-R no GitHub:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-5_fbcf4ec1a47a30a6c98a1002422ba0a0'}\n\n```{.r .cell-code}\nrepositorios_cursor <- gh::gh(\"GET /orgs/{org}/repos\", org = \"curso-r\")\n\n# A classe que retorna é uma lista\nclass(repositorios_cursor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gh_response\" \"list\"       \n```\n:::\n\n```{.r .cell-code}\n# É uma lista grande!\nlength(repositorios_cursor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n:::\n\n\nEsse código retornou informações de apenas 30 repositórios.\nPortanto, precisamos repetir o processo para obter informações de todos os repositórios.\n\n### Iterando com purrr e o pacote `gh`\n\nA documentação do pacote aponta que é possível buscar informações de 100 repositórios por vez.\nSe queremos buscar todos os repositórios, primeiro precisamos calcular quantas vezes vamos repetir o processo todo:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-6_40c4627c3c9a21db268b3372a7c26145'}\n\n```{.r .cell-code}\nnumero_repos_publicos <- gh_curso_r$public_repos\n\n# podemos buscar 100 repositórios por vez,\n# então podemos dividir o numero de repositorios\n# por 100, e arredondar \"para cima\"\n# (é para isso que a função ceiling() serve!)\nnumero_paginas <- ceiling(numero_repos_publicos/100)\n\nnumero_paginas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nPrecisaremos repetir 4 vezes!\nAgora podemos usar a função `purrr::map()` para repetir o acesso à API quantas vezes forem necessárias para obter as informações de todos os repositórios da Curso-R:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-7_39710953f866c0ae212cd3d648b55177'}\n\n```{.r .cell-code}\nrepos_cursor <- purrr::map(1:numero_paginas, \n                           .f = ~gh::gh(\n    \"GET /orgs/{org}/repos\", \n    org = \"curso-r\", # organizacao\n    type = \"public\", # tipo de repositorio \n    sort = \"updated\", # forma de ordenar a busca\n    per_page = 100, # numero de resultados por pagina\n    page = .x # numero da pagina que será substituido\n  ))\n```\n:::\n\n\nO resultado ainda é uma lista... podemos usar a magia do pacote purrr e transformar essa lista em um dataframe:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-8_03455063d13eeed0b634bafa256e4e06'}\n\n```{.r .cell-code}\nlista_repos <-  repos_cursor  |> \n  purrr::flatten() |> \n  purrr::map(unlist, recursive = TRUE)  |> \n  purrr::map_dfr(tibble::enframe, .id = \"id_repo\") |> \n  tidyr::pivot_wider() |> \n  janitor::clean_names()\n\nlista_repos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 313 × 108\n   id_repo id        node_id        name  full_name private owner_login owner_id\n   <chr>   <chr>     <chr>          <chr> <chr>     <chr>   <chr>       <chr>   \n 1 1       431987860 R_kgDOGb-clA   2022… curso-r/… FALSE   curso-r     10060716\n 2 2       431987947 R_kgDOGb-c6w   2022… curso-r/… FALSE   curso-r     10060716\n 3 3       292873974 MDEwOlJlcG9za… main… curso-r/… FALSE   curso-r     10060716\n 4 4       432004121 R_kgDOGb_cGQ   2022… curso-r/… FALSE   curso-r     10060716\n 5 5       500593205 R_kgDOHdZyNQ   main… curso-r/… FALSE   curso-r     10060716\n 6 6       311969160 MDEwOlJlcG9za… chess curso-r/… FALSE   curso-r     10060716\n 7 7       180506470 MDEwOlJlcG9za… main… curso-r/… FALSE   curso-r     10060716\n 8 8       176309514 MDEwOlJlcG9za… main… curso-r/… FALSE   curso-r     10060716\n 9 9       498141879 R_kgDOHbEKtw   anac… curso-r/… FALSE   curso-r     10060716\n10 10      414400266 R_kgDOGLM_Cg   muni… curso-r/… FALSE   curso-r     10060716\n# … with 303 more rows, and 100 more variables: owner_node_id <chr>,\n#   owner_avatar_url <chr>, owner_gravatar_id <chr>, owner_url <chr>,\n#   owner_html_url <chr>, owner_followers_url <chr>, owner_following_url <chr>,\n#   owner_gists_url <chr>, owner_starred_url <chr>,\n#   owner_subscriptions_url <chr>, owner_organizations_url <chr>,\n#   owner_repos_url <chr>, owner_events_url <chr>,\n#   owner_received_events_url <chr>, owner_type <chr>, …\n```\n:::\n:::\n\n\nVamos fazer mais uma etapa de organização dos dados: são muitas colunas, e não precisaremos de todas para terminar o post.\nTambém filtramos a base para remover os forks, já que não seriam repositórios da Curso-R originalmente.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-9_264fc9e1bc41ff6b62734b836acce9a9'}\n\n```{.r .cell-code}\ndf_repos_cursor <- lista_repos  |>\n  dplyr::filter(fork == FALSE)  |>\n  dplyr::select(\n    name,\n    created_at,\n    default_branch\n  )  |>\n  dplyr::mutate(\n    data_criacao = readr::parse_datetime(created_at),\n    ano_criacao = as.Date(lubridate::floor_date(data_criacao, \"year\"))\n  )\n```\n:::\n\n\n## Exemplo de visualização com os dados obtidos!\n\nEm 2020, o [Caio](https://lente.dev) escreveu um post sobre o uso do [termo 'master' no GitHub](https://blog.curso-r.com/posts/2020-07-27-github-main-branch/).\nLá no post é explicado sobre a questão da substituição do termo 'master'.\nEm 2020 a GitHub anunciou que faria a transição para o termo main (principal), e desde então muitas pessoas e organizações estão renomeando a branch principal de seus repositórios para 'main'(inclusive existe um [post no blog da RStudio sobre isso](https://www.tidyverse.org/blog/2021/10/renaming-default-branch/)).\n\nUsando os dados obtidos nesse post, vamos explorar os repositórios da Curso-R e averiguar qual é o nome da branch principal dos repositórios ao longo do tempo?\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-10_231422e63500576517177479ddc0b7b2'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nmain_percent <- mean(df_repos_cursor$default_branch == \"main\")\nmain_percent <- scales::percent(main_percent)\ndf_repos_cursor  |>\n  dplyr::count(ano_criacao, default_branch)  |>\n  ggplot() +\n  geom_col(aes(y = n, x = ano_criacao, fill = default_branch)) +\n  theme_bw() +\n  scale_x_date(date_labels = \"%Y\", date_breaks = \"1 year\") +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  labs(x = \"Ano de criação\", y = \"Número de repositórios\", fill = \"Nome da Branch\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nÉ possível ver que em 2021 o uso do termo 'main' para nomear as branches principais foi muito mais usado!\nAtualmente, o percentual de repositórios `main` é de 26% e esperamos que isso aumente com o tempo.\nOutra coisa legal do gráfico é ver como a criação de repositórios na organização da Curso-R foi crescendo ao longo do tempo!\n\nÉ isso!\nDúvidas, sugestões e críticas, mande aqui nos comentários.\n**Postem também quais exemplos, dentre os que foram listados, vocês gostariam de saber mais!!**\n\nSe você quiser saber mais sobre acessar APIs, o [curso de Web Scraping](https://loja.curso-r.com/web-scraping.html) é uma ótima oportunidade!\n\nAté a próxima!\n\n## Referências\n\n-   [Slides do curso de Web Scraping sobre APIs](https://curso-r.github.io/main-web-scraping/slides/02-introducao-ao-ws.html#8)\n\n-   [Slides do curso de Deploy](https://curso-r.github.io/main-deploy/docs/index.html#12)\n\n-   Pacote [`httr`](https://cran.r-project.org/web/packages/httr/vignettes/quickstart.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}