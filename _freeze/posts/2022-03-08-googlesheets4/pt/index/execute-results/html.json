{
  "hash": "2340178bea98763c786d0177d23108a6",
  "result": {
    "markdown": "---\ntitle: \"Acessando dados do Google Sheets com R\"\nsubtitle: \"Post publicado no blog da Curso-R.\"\nauthor: \"Beatriz Milz\"\ndate: \"2022-03-08\"\nimage: \"featured-hex.png\"\ncategories: [\"API\", \"Google\", \"Data import\", \"Google Sheets\"]\ntoc: true\n---\n\n\n\n\n::: callout-tip\nEsse post foi origalmente publicado no [blog da Curso-R](https://blog.curso-r.com/posts/2022-03-08-googlesheets4/).\n:::\n\n\n## Introdução\n\nO [Google Sheets](https://docs.google.com/spreadsheets/u/0/) é um editor de planilhas da Google, que funciona vinculado ao Google Drive (ou seja, os arquivos ficam na nuvem).\nO pacote [googlesheets4](https://googlesheets4.tidyverse.org/) permite interagir com o Google Sheets através do R.\nNeste post, vamos mostrar alguns exemplos sobre como podemos importar dados usando o pacote `googlesheets4`.\n\nPrimeiramente, é necessário instalar o pacote:\n\n``` r\ninstall.packages(\"googlesheets4\")\n```\n\nEntão, podemos carregá-lo:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_416f200bdb52fece3b11f214d45acf2e'}\n\n```{.r .cell-code}\n# Carregar pacote googlesheets4\nlibrary(googlesheets4)\n```\n:::\n\n\nNeste exemplo, usaremos a tabela da [base de dados Gapminder](https://cran.r-project.org/web/packages/gapminder/README.html), que apresenta algumas informações por país e ano, como a população total, expectativa de vida ao nascer e o PIB per capita.\n\nPara importar uma tabela que está no Google Sheets, primeiramente precisamos identificá-la para que o R saiba qual arquivo queremos abrir.\nUma forma de fazer isso é usando a *URL* (ou *Uniform Resource Locator*), que é também conhecido como *o link que usamos no navegador*.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_18df8920a40dc2cc7679fd344643fedd'}\n::: {.cell-output-display}\n![](img/url.png){width=1375}\n:::\n:::\n\n\nUm exemplo de url é o seguinte, e ele encaminha para [essa tabela](https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077).\n\n    https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077\n\nSabendo a URL da planilha, podemos salvar em um objeto no R para facilitar o uso!\n\n``` r\n# salvar a url/link da planilha que queremos acessar\nurl_planilha <- \"https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077\"\n```\n\n### Autenticação\n\nPara evitar que alguém que não tem acesso a uma Google Sheet consiga ler a mesma sem permissão, o pacote nos direciona para fazer uma autenticação com uma conta do Google.\nEsse direcionamento é feito quando usamos alguma função que necessita de autenticação pela primeira vez, e a cada sessão do R (ou seja, sempre que reiniciar), o R perguntará novamente com qual email do Google gostaríamos de autenticar.\n\nExemplo: No meu caso, eu já autentiquei anteriormente, então ele apresenta os emails já autenticados.\n\n``` r\nrespostas_formulario <- read_sheet(url)\n# → The googlesheets4 package is requesting access to your Google account\n#   Select a pre-authorised account or enter '0' to obtain a new token\n#   Press Esc/Ctrl + C to cancel\n# \n# 1: bmilz@curso-r.com\n# 2: milz.bea@gmail.com\n```\n\nPara fazer uma nova autenticação, basta escolher a opção `0`, e uma janela do navegador abrirá para fazer a autenticação:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-3_e73f6dbb46814a483d869b8d41d560d2'}\n::: {.cell-output-display}\n![](img/auth1.png){fig-align='center' width=50%}\n:::\n:::\n\n\nPrecisamos então clicar no email desejado, selecionar todas as opções de acesso e clicar em \"Continuar\":\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-4_fd9b1cabcda317912083ff28054bea46'}\n::: {.cell-output-display}\n![](img/auth2.png){fig-align='center' width=50%}\n:::\n:::\n\n\nCaso funcione, a seguinte mensagem aparecerá no navegador: `Authentication complete. Please close this page and return to R`.\nIsso significa que podemos voltar ao R!\n\n> DEU ERRO!\n> Caso dê erro ao abrir o arquivo, se certifique que você tem acesso de leitura ou edição do Google Sheets desejado.\n\nAgora podemos experimenta as funções do pacote!\n\n### Função `sheet_properties()`\n\nA função `sheet_properties()` permite ver quais abas (chamaremos muitas vezes de *sheets*, pois é a forma usada no pacote) estão disponíveis na tabela:\n\n``` r\n# ver as propriedades da planilha (conseguimos descobrir quais sheets \n# estão disponíveis)\nsheet_properties(url_planilha)\n## # A tibble: 5 × 8\n##   name     index         id type  visible grid_rows grid_columns data  \n##   <chr>    <int>      <int> <chr> <lgl>       <int>        <int> <list>\n## 1 Africa       0  780868077 GRID  TRUE          625            6 <NULL>\n## 2 Americas     1   45759261 GRID  TRUE          301            6 <NULL>\n## 3 Asia         2 1984823455 GRID  TRUE          397            6 <NULL>\n## 4 Europe       3 1503562052 GRID  TRUE          361            6 <NULL>\n## 5 Oceania      4 1796776040 GRID  TRUE           25            6 <NULL>\n```\n\nCom isso, sabemos que a tabela que informamos tem 5 abas, sendo elas: Africa, Americas, Asia, Europe e Oceania.\n\n### Função `read_sheet()`\n\nA função mais útil (na minha opinião) do pacote é a que usamos para ler os dados: `read_sheet()`!\n\nSe usarmos essa função sem nenhum argumento além do *url* da planilha, por padrão a primeira sheet será importada.\nComo vimos no resultado da função `sheet_properties()`, a primeira aba da base contém os dados dos países que estão no continente Africano.\nEntão os dados que serão importados são referentes à este continente:\n\n``` r\nplanilha <- read_sheet(url_planilha)\ndplyr::glimpse(planilha)\n## Rows: 624\n## Columns: 6\n## $ country   <chr> \"Algeria\", \"Algeria\", \"Algeria\", \"Algeria\", \"Algeria\", \"Alge…\n## $ continent <chr> \"Africa\", \"Africa\", \"Africa\", \"Africa\", \"Africa\", \"Africa\", …\n## $ year      <dbl> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n## $ lifeExp   <dbl> 43.077, 45.685, 48.303, 51.407, 54.518, 58.014, 61.368, 65.7…\n## $ pop       <dbl> 9279525, 10270856, 11000948, 12760499, 14760787, 17152804, 2…\n## $ gdpPercap <dbl> 2449.0082, 3013.9760, 2550.8169, 3246.9918, 4182.6638, 4910.…\n```\n\nPodemos também usar o argumento `sheet =` para especificar qual aba queremos importar.\nPodemos fazer a busca pela posição (ou seja, informando um número), ou pelo nome da aba:\n\n``` r\n# abrir uma sheet específica: pela posição\nplanilha_sheet_3 <- read_sheet(url_planilha, sheet = 3)\ndplyr::glimpse(planilha_sheet_3)\n## Rows: 396\n## Columns: 6\n## $ country   <chr> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n## $ continent <chr> \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asi…\n## $ year      <dbl> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n## $ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8…\n## $ pop       <dbl> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12…\n## $ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, …\n\n# abrir uma sheet específica: pelo nome\nplanilha_asia <- read_sheet(url_planilha, sheet = \"Asia\")\ndplyr::glimpse(planilha_asia)\n## Rows: 396\n## Columns: 6\n## $ country   <chr> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n## $ continent <chr> \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asi…\n## $ year      <dbl> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n## $ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8…\n## $ pop       <dbl> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12…\n## $ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, …\n```\n\nComo todas as tabelas da base tem a mesma estrutura, podemos usar o pacote [purrr](https://purrr.tidyverse.org/reference/map.html) para importar todas as abas de uma vez:\n\n``` r\n# a função sheet_names permite buscar apenas o nome das abas\nnome_abas <- sheet_names(url_planilha)\n\n# com o purrr, podemos abrir todas as abas de uma vez!\ngapminder_completo <- nome_abas |> \n  purrr::map_dfr(~ read_sheet(url_planilha, sheet = .x))\n\ndplyr::glimpse(gapminder_completo)\n## Rows: 1,704\n## Columns: 6\n## $ country   <chr> \"Algeria\", \"Algeria\", \"Algeria\", \"Algeria\", \"Algeria\", \"Alge…\n## $ continent <chr> \"Africa\", \"Africa\", \"Africa\", \"Africa\", \"Africa\", \"Africa\", …\n## $ year      <dbl> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n## $ lifeExp   <dbl> 43.077, 45.685, 48.303, 51.407, 54.518, 58.014, 61.368, 65.7…\n## $ pop       <dbl> 9279525, 10270856, 11000948, 12760499, 14760787, 17152804, 2…\n## $ gdpPercap <dbl> 2449.0082, 3013.9760, 2550.8169, 3246.9918, 4182.6638, 4910.…\n```\n\n### Outras funções\n\nEsse pacote tem muitas outras funções que interagem com o Googles Sheets, mas que não fazem parte do escopo deste post, como criar uma nova aba e escrever dados em uma aba.\nEssas funções também são muito úteis!\n\n### E o Google Forms?\n\nEu gosto muito de usar esse pacote para importar respostas de [formulários do Google](https://docs.google.com/forms/u/0/), pois o Google permite vincular respostas dos formulários em uma Google Sheets.\n\nAqui mostrarei como fazer isso!\nPrimeiro precisamos criar um formulário (caso ele ainda não exista):\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_766b3cdfd7b47c7aeac493363c4c8294'}\n::: {.cell-output-display}\n![](img/forms1.png){width=1233}\n:::\n:::\n\n\nAo criar o formulário, podemos clicar em \"Respostas\" e então clicar no logo do Google Sheets (um quadrado verde com uma linha branca horizontal e outra vertical):\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_c69f8672c664e38ebd88e66ef2433824'}\n::: {.cell-output-display}\n![](img/forms2.png){width=1430}\n:::\n:::\n\n\nO Google Forms irá perguntar qual o nome da Google Sheet a ser criada (ou também podemos selecionar uma Google Sheets que já existe):\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_4332fe72f99d331687ee051b0d4826aa'}\n::: {.cell-output-display}\n![](img/forms3.png){width=1436}\n:::\n:::\n\n\nDepois de selecionar qual a Google Sheet ficará vinculada ao formulário, a Google Sheet será aberta e podemos ver as respostas:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_4fc283d0f016e904cdeb0ba78652474f'}\n::: {.cell-output-display}\n![](img/forms4.png){width=1373}\n:::\n:::\n\n\nCada coluna terá informações de uma pergunta do formulário.\nInicialmente, a base terá 0 linhas, pois quando criamos o formulário ele tem 0 respostas.\nPorém, após alguém responder o formulário, a Google Sheet é automaticamente atualizada e apresentará a resposta.\nPodemos importar os dados usando a função `read_sheet()`, como mostrado anteriormente:\n\n``` r\nurl <- \"https://docs.google.com/spreadsheets/d/1Ch3aMraacwhNo1sU4Z9b54nWYG8gdl18UfLJMzquL8s/\"\n\nrespostas_formulario <- read_sheet(url)\n\nrespostas_formulario\n## # A tibble: 1 × 2\n##   `Carimbo de data/hora` `Pergunta sem título`\n##   <dttm>                 <chr>                \n## 1 2022-03-08 21:29:01    Opção 1\n```\n\nÉ isso!\nDúvidas, sugestões e críticas, mande aqui nos comentários.\n**Postem também quais funções do pacote vocês gostariam de saber mais!!**\n\nAté a próxima!\n\n## Referências\n\n-   [Documentação do pacote googlesheets4](https://googlesheets4.tidyverse.org/)\n\n-   [Documentação do pacote purrr](https://purrr.tidyverse.org/reference/map.html)\n\n-   [Referência da base Gapminder](https://www.gapminder.org/data/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}