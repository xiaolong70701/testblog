{
  "hash": "a7b604da50315685cf87cfdf2dd4433f",
  "result": {
    "markdown": "---\ntitle: \"How important is GitHub Actions to RStudio/Posit?\"\nsubtitle: \"Code for a plot in my talk at rstudio::conf 2022!\"\nauthor: \"Beatriz Milz\"\ndate: \"2022-06-28\"\ncategories: [\"Git\", \"GitHub\", \"GitHub Actions\", \"Automations\", \"RStudio\", \"Posit\"]\nimage: \"img/rstudio_ggplot.png\"\ntoc: true\ndraft: true\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nThis post is a complementary material for [my talk at rstudio::conf 2022](https://beamilz.com/talks/en/2022-rstudio-conf/) (which is happening **TODAY!!!**)! \n\n\nI'm writing this really quick, from the hotel room, for anyone interested to see the code used to create the plot that it is on my talk:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/rstudio_ggplot.png){fig-align='center'}\n:::\n:::\n\n\nThe plot uses data from the GitHub API, collected with the help of the package `gh` and `tidyverse`. The plot was created using `ggplot2`, and shows the actions runs per month on GitHub repositories in organizations related to RStudio/Posit.\n\n::: {.callout-note icon=false}\n\n## Important\n\nThe version of the plot presented in the talk uses data until May 2022, because we had to deliver the slides by the start of July. The plot presented in this blog post uses data collected in July 27th, but filtered to show action runs until May 2022.\n:::\n\nFirst, I had to look for the organizations. This was the list of organizations related to [RStudio/Posit](https://posit.co/) that I found on GitHub:\n\n- [tidyverse](https://github.com/tidyverse)\n- [r-lib](https://github.com/r-lib)\n- [mlverse](https://github.com/mlverse)\n- [tidymodels](https://github.com/tidymodels)\n- [rstudio](https://github.com/rstudio)\n- [quarto-dev](https://github.com/quarto-dev)\n\nThere might be more that I don't know about!\n\nSo, here is a vector with the names of the organizations:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrstudio_orgs <-\n  c(\"rstudio\",\n    \"tidyverse\",\n    \"r-lib\",\n    \"mlverse\",\n    \"tidymodels\",\n    \"quarto-dev\")\n```\n:::\n\n\nThen, I created an R function that looks for all public repositories in a organization:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfind_repos_github_org <- function(organisation) {\n  # get info about the org\n  gh_org <- gh::gh(\"GET /orgs/{org}\",\n                   org = organisation)\n  \n  number_of_public_repos <- gh_org$public_repos\n  \n  \n  pages_to_iterate <- ceiling(number_of_public_repos / 100)\n  \n  \n  repos_org_list <- purrr::map(\n    1:pages_to_iterate,\n    .f = ~ gh::gh(\n      \"GET /orgs/{org}/repos\",\n      org = organisation,\n      type = \"public\",\n      sort = \"updated\",\n      per_page = 100,\n      page = .x\n    )\n  )\n  \n  repos_org_df <- repos_org_list  |>\n    purrr::flatten() |>\n    purrr::map(unlist, recursive = TRUE)  |>\n    purrr::map_dfr(tibble::enframe, .id = \"id_repo\") |>\n    tidyr::pivot_wider() |>\n    janitor::clean_names()\n}\n```\n:::\n\n\nAnd then I executed that function for all organizations using `purrr`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrstudio_repositories <- rstudio_orgs |>\n  purrr::map_dfr(find_repos_github_org)\n```\n:::\n\n\nThis is what I found (click to unfold the glimpsed result): \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndplyr::glimpse(rstudio_repositories)\n\n# Rows: 599\n# Columns: 114\n# $ id_repo                     <chr> \"1\", \"2\", \"3\", \"4\", …\n# $ id                          <chr> \"390115983\", \"168794…\n# $ node_id                     <chr> \"MDEwOlJlcG9zaXRvcnk…\n# $ name                        <chr> \"py-shiny\", \"chromot…\n# $ full_name                   <chr> \"rstudio/py-shiny\", …\n# $ private                     <chr> \"FALSE\", \"FALSE\", \"F…\n# $ owner_login                 <chr> \"rstudio\", \"rstudio\"…\n# $ owner_id                    <chr> \"513560\", \"513560\", …\n# $ owner_node_id               <chr> \"MDEyOk9yZ2FuaXphdGl…\n# $ owner_avatar_url            <chr> \"https://avatars.git…\n# $ owner_gravatar_id           <chr> \"\", \"\", \"\", \"\", \"\", …\n# $ owner_url                   <chr> \"https://api.github.…\n# $ owner_html_url              <chr> \"https://github.com/…\n# $ owner_followers_url         <chr> \"https://api.github.…\n# $ owner_following_url         <chr> \"https://api.github.…\n# $ owner_gists_url             <chr> \"https://api.github.…\n# $ owner_starred_url           <chr> \"https://api.github.…\n# $ owner_subscriptions_url     <chr> \"https://api.github.…\n# $ owner_organizations_url     <chr> \"https://api.github.…\n# $ owner_repos_url             <chr> \"https://api.github.…\n# $ owner_events_url            <chr> \"https://api.github.…\n# $ owner_received_events_url   <chr> \"https://api.github.…\n# $ owner_type                  <chr> \"Organization\", \"Org…\n# $ owner_site_admin            <chr> \"FALSE\", \"FALSE\", \"F…\n# $ html_url                    <chr> \"https://github.com/…\n# $ description                 <chr> \"Shiny for Python\", …\n# $ fork                        <chr> \"FALSE\", \"FALSE\", \"F…\n# $ url                         <chr> \"https://api.github.…\n# $ forks_url                   <chr> \"https://api.github.…\n# $ keys_url                    <chr> \"https://api.github.…\n# $ collaborators_url           <chr> \"https://api.github.…\n# $ teams_url                   <chr> \"https://api.github.…\n# $ hooks_url                   <chr> \"https://api.github.…\n# $ issue_events_url            <chr> \"https://api.github.…\n# $ events_url                  <chr> \"https://api.github.…\n# $ assignees_url               <chr> \"https://api.github.…\n# $ branches_url                <chr> \"https://api.github.…\n# $ tags_url                    <chr> \"https://api.github.…\n# $ blobs_url                   <chr> \"https://api.github.…\n# $ git_tags_url                <chr> \"https://api.github.…\n# $ git_refs_url                <chr> \"https://api.github.…\n# $ trees_url                   <chr> \"https://api.github.…\n# $ statuses_url                <chr> \"https://api.github.…\n# $ languages_url               <chr> \"https://api.github.…\n# $ stargazers_url              <chr> \"https://api.github.…\n# $ contributors_url            <chr> \"https://api.github.…\n# $ subscribers_url             <chr> \"https://api.github.…\n# $ subscription_url            <chr> \"https://api.github.…\n# $ commits_url                 <chr> \"https://api.github.…\n# $ git_commits_url             <chr> \"https://api.github.…\n# $ comments_url                <chr> \"https://api.github.…\n# $ issue_comment_url           <chr> \"https://api.github.…\n# $ contents_url                <chr> \"https://api.github.…\n# $ compare_url                 <chr> \"https://api.github.…\n# $ merges_url                  <chr> \"https://api.github.…\n# $ archive_url                 <chr> \"https://api.github.…\n# $ downloads_url               <chr> \"https://api.github.…\n# $ issues_url                  <chr> \"https://api.github.…\n# $ pulls_url                   <chr> \"https://api.github.…\n# $ milestones_url              <chr> \"https://api.github.…\n# $ notifications_url           <chr> \"https://api.github.…\n# $ labels_url                  <chr> \"https://api.github.…\n# $ releases_url                <chr> \"https://api.github.…\n# $ deployments_url             <chr> \"https://api.github.…\n# $ created_at                  <chr> \"2021-07-27T20:19:49…\n# $ updated_at                  <chr> \"2022-07-27T23:47:04…\n# $ pushed_at                   <chr> \"2022-07-27T20:48:42…\n# $ git_url                     <chr> \"git://github.com/rs…\n# $ ssh_url                     <chr> \"git@github.com:rstu…\n# $ clone_url                   <chr> \"https://github.com/…\n# $ svn_url                     <chr> \"https://github.com/…\n# $ homepage                    <chr> \"https://shiny.rstud…\n# $ size                        <chr> \"7850\", \"16032\", \"31…\n# $ stargazers_count            <chr> \"19\", \"125\", \"1532\",…\n# $ watchers_count              <chr> \"19\", \"125\", \"1532\",…\n# $ language                    <chr> \"JavaScript\", \"R\", \"…\n# $ has_issues                  <chr> \"TRUE\", \"TRUE\", \"TRU…\n# $ has_projects                <chr> \"TRUE\", \"TRUE\", \"FAL…\n# $ has_downloads               <chr> \"TRUE\", \"TRUE\", \"TRU…\n# $ has_wiki                    <chr> \"TRUE\", \"TRUE\", \"FAL…\n# $ has_pages                   <chr> \"TRUE\", \"TRUE\", \"FAL…\n# $ forks_count                 <chr> \"0\", \"18\", \"335\", \"1…\n# $ archived                    <chr> \"FALSE\", \"FALSE\", \"F…\n# $ disabled                    <chr> \"FALSE\", \"FALSE\", \"F…\n# $ open_issues_count           <chr> \"48\", \"27\", \"44\", \"1…\n# $ license_key                 <chr> \"mit\", NA, NA, \"othe…\n# $ license_name                <chr> \"MIT License\", NA, N…\n# $ license_spdx_id             <chr> \"MIT\", NA, NA, \"NOAS…\n# $ license_url                 <chr> \"https://api.github.…\n# $ license_node_id             <chr> \"MDc6TGljZW5zZTEz\", …\n# $ allow_forking               <chr> \"TRUE\", \"TRUE\", \"TRU…\n# $ is_template                 <chr> \"FALSE\", \"FALSE\", \"F…\n# $ web_commit_signoff_required <chr> \"FALSE\", \"FALSE\", \"F…\n# $ visibility                  <chr> \"public\", \"public\", …\n# $ forks                       <chr> \"0\", \"18\", \"335\", \"1…\n# $ open_issues                 <chr> \"48\", \"27\", \"44\", \"1…\n# $ watchers                    <chr> \"19\", \"125\", \"1532\",…\n# $ default_branch              <chr> \"main\", \"main\", \"mai…\n# $ permissions_admin           <chr> \"FALSE\", \"FALSE\", \"F…\n# $ permissions_maintain        <chr> \"FALSE\", \"FALSE\", \"F…\n# $ permissions_push            <chr> \"FALSE\", \"FALSE\", \"F…\n# $ permissions_triage          <chr> \"FALSE\", \"FALSE\", \"F…\n# $ permissions_pull            <chr> \"TRUE\", \"TRUE\", \"TRU…\n# $ topics1                     <chr> NA, NA, \"blog-engine…\n# $ topics2                     <chr> NA, NA, \"blogdown\", …\n# $ topics3                     <chr> NA, NA, \"hugo\", NA, …\n# $ topics4                     <chr> NA, NA, \"r\", NA, NA,…\n# $ topics5                     <chr> NA, NA, \"rmarkdown\",…\n# $ topics6                     <chr> NA, NA, \"rstudio\", N…\n# $ topics7                     <chr> NA, NA, \"website-gen…\n# $ topics                      <chr> NA, NA, NA, NA, NA, …\n# $ topics8                     <chr> NA, NA, NA, NA, NA, …\n# $ topics9                     <chr> NA, NA, NA, NA, NA, …\n# $ topics10                    <chr> NA, NA, NA, NA, NA, …\n```\n:::\n\n\nThen, I filtered the repositories to remove the repositories that are forks, in order to see only the original repos:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noriginal_rstudio_repos <- rstudio_repositories |>\n  dplyr::filter(fork == FALSE)\n```\n:::\n\n\nAt this point, I had a tibble with more than 500 repositories. I wanted to get the action runs for every one of this repositories! So I wrote another function to do that, and save the result for each repository in a local file.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nget_repo_github_actions_runs <- function(repo_full_name) {\n  usethis::ui_info(\"Starting with {repo_full_name}...\")\n  total_count <- gh::gh(\n    \"GET /repos/{full_name}/actions/runs\",\n    full_name = repo_full_name,\n    per_page = 1\n  )$total_count\n  \n  \n  pages_to_iterate <- ceiling(total_count / 100)\n  \n  list_all_runs <- purrr::map_dfr(\n    1:pages_to_iterate,\n    ~ gh::gh(\n      \"GET /repos/{full_name}/actions/runs\",\n      full_name = repo_full_name,\n      per_page = 100,\n      page = .x\n    )\n  )\n  \n  runs_df <- list_all_runs |>\n    purrr::pluck(\"workflow_runs\") |>\n    purrr::map(purrr::compact) |>\n    purrr::map(purrr::discard, ~ is.list(.x)) |>\n    purrr::map_dfr(tibble::as_tibble, .id = \"id\") |>\n    dplyr::mutate(repo = repo_full_name, \n                  .before = tidyselect::everything())\n  \n  fs::dir_create(\"data/repos/\")\n  readr::write_rds(\n    runs_df,\n    glue::glue(\n      \"data/repos/runs_{stringr::str_replace(repo_full_name, '/', '_')}_{Sys.Date()}.Rds\"\n    )\n  )\n  \n  usethis::ui_done(\"Done with {repo_full_name}...\")\n}\n```\n:::\n\n\nThen I used purrr again, to run this function for every repository. **This took quite some time to run!**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noriginal_rstudio_repos |>\n  dplyr::pull(full_name) |>\n  purrr::walk(get_repo_github_actions_runs)\n```\n:::\n\n\nAt this point, I had one `.Rds` file per repository, so more than 500 files. Thankfully I know the arts of `purrr` and used that magic to import all the files into a single tibble:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_complete_runs <- fs::dir_ls(\"data/repos/\") |>\n  purrr::map_dfr(readr::read_rds)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndplyr::glimpse(df_complete_runs)\n# Rows: 333,594\n# Columns: 28\n# $ repo                 <chr> \"mlverse/cuda.ml\", \"mlverse/cuda.m…\n# $ id                   <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",…\n# $ name                 <chr> \"R-CMD-check\", \"pages build and de…\n# $ node_id              <chr> \"WFR_kwLOFqIlBc5kYBiS\", \"WFR_kwLOF…\n# $ head_branch          <chr> \"main\", \"main\", \"main\", \"main\", \"m…\n# $ head_sha             <chr> \"54fc9575e271b6a94c8650bea1887bb7f…\n# $ path                 <chr> \".github/workflows/R-CMD-check.yam…\n# $ run_number           <int> 221, 13, 220, 12, 219, 11, 218, 21…\n# $ event                <chr> \"push\", \"dynamic\", \"push\", \"dynami…\n# $ status               <chr> \"completed\", \"completed\", \"complet…\n# $ conclusion           <chr> \"success\", \"success\", \"success\", \"…\n# $ workflow_id          <int> 14189930, 17359975, 14189930, 1735…\n# $ check_suite_id       <dbl> 4901217228, 4901217123, 4886275561…\n# $ check_suite_node_id  <chr> \"CS_kwDOFqIlBc8AAAABJCKjzA\", \"CS_k…\n# $ url                  <chr> \"https://api.github.com/repos/mlve…\n# $ html_url             <chr> \"https://github.com/mlverse/cuda.m…\n# $ created_at           <chr> \"2022-01-11T18:30:04Z\", \"2022-01-1…\n# $ updated_at           <chr> \"2022-01-11T22:37:18Z\", \"2022-01-1…\n# $ run_attempt          <int> 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1…\n# $ run_started_at       <chr> \"2022-01-11T18:30:04Z\", \"2022-01-1…\n# $ jobs_url             <chr> \"https://api.github.com/repos/mlve…\n# $ logs_url             <chr> \"https://api.github.com/repos/mlve…\n# $ check_suite_url      <chr> \"https://api.github.com/repos/mlve…\n# $ artifacts_url        <chr> \"https://api.github.com/repos/mlve…\n# $ cancel_url           <chr> \"https://api.github.com/repos/mlve…\n# $ rerun_url            <chr> \"https://api.github.com/repos/mlve…\n# $ workflow_url         <chr> \"https://api.github.com/repos/mlve…\n# $ previous_attempt_url <chr> NA, NA, NA, NA, NA, NA, \"https://a…\n```\n:::\n\n\nThen, I counted action runs per month:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncounted_data <- df_complete_runs |>\n  dplyr::mutate(\n    start_date = lubridate::as_date(run_started_at),\n    run_month = lubridate::floor_date(start_date, \"month\")\n  ) |>\n  dplyr::filter(conclusion != \"skipped\", start_date < \"2022-06-01\") |>\n  dplyr::count(run_month)\n```\n:::\n\n\n\nWith this tibble, I was able to use tidyverse and ggplot2 to create the plot!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\noptions(scipen = 9999)\n\nmax_min <- counted_data |>\n  dplyr::filter(run_month %in% c(min(run_month), max(run_month))) |>\n  dplyr::mutate(label = glue::glue(\"{round(n/1000)}k\"))\n\nbase_graph <- counted_data |>\n  ggplot() +\n  geom_line(aes(x = run_month, y = n), color = \"#80868b\", size = 1.5)\n\n\nfinal_graph <- base_graph +\n  theme_minimal(base_size = 15) +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Montserrat\", color = \"#4c83b6\"),\n    text = element_text(family = \"Montserrat\", color = \"#80868b\")\n  ) +\n  labs(\n    y = \"Actions runs per month\",\n    x = \"\",\n    title = \"Actions runs by RStudio/Posit organizations on GitHub\",\n    caption = \"Plot made by @BeaMilz. Data from the GitHub API.\"\n  ) +\n  scale_x_date(\n    date_labels = \"%b/%y\",\n    date_breaks = \"4 month\",\n    limits = c(as.Date(\"2020-03-01\"), as.Date(\"2022-06-01\"))\n  ) +\n  scale_y_continuous(\n    limits = c(0, 25000),\n    labels = function(x) {\n      glue::glue(\"{x/1000}k\")\n    }\n  ) +\n  geom_point(\n    data = max_min,\n    aes(x = run_month, y = n),\n    size = 3,\n    color = \"#4c83b6\"\n  ) +\n  ggrepel::geom_text_repel(\n    data = max_min,\n    aes(x = run_month, y = n, label = label),\n    size = 10,\n    color = \"#4c83b6\",\n    nudge_y = 4000,\n    nudge_x = 0,\n    min.segment.length = 0\n  )\n\n\nggsave(\n  \"img/rstudio_ggplot.png\",\n  plot = final_graph,\n  dpi = 300,\n  height = 5,\n  width = 7\n)\n```\n:::\n\n\n🎉 Now we have the plot showed in the talk! 🎉 \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"img/rstudio_ggplot.png\")\n```\n\n::: {.cell-output-display}\n![](img/rstudio_ggplot.png){fig-align='center'}\n:::\n:::\n\n\nThanks!!\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}